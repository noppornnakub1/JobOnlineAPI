name: SonarCloud Scan for JobOnlineAPI

on:
  push:
    branches:
      - master

jobs:
  build-and-analyze:
    name: Build and Analyze with SonarCloud
    runs-on: windows-latest
    steps:
      # Checkout โค้ดจาก branch feature/Copter
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ปิด shallow clone เพื่อให้ SonarCloud วิเคราะห์ได้ดีขึ้น

      # ตั้งค่า .NET SDK
      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # แคช SonarCloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # แคช SonarScanner
      - name: Cache SonarScanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # ติดตั้ง SonarScanner ถ้าไม่พบในแคช
      - name: Install SonarScanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
          if ($LASTEXITCODE -ne 0) { throw "SonarScanner installation failed" }

      # ติดตั้ง Coverlet สำหรับ coverage (ถ้ามี test projects)
      - name: Install Coverlet
        shell: powershell
        run: |
          dotnet tool install --global coverlet.console
          if ($LASTEXITCODE -ne 0) { throw "Coverlet installation failed" }

      # เริ่มการสแกน SonarCloud
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          echo "Project Key: noppornnakub1_JobOnlineAPI"
          echo "Organization: noppornnakub1"
          echo "SONAR_TOKEN: $env:SONAR_TOKEN"
          ./.sonar/scanner/dotnet-sonarscanner begin `
            /k:"noppornnakub1_JobOnlineAPI" `
            /o:"noppornnakub1" `
            /d:sonar.token="$env:SONAR_TOKEN" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="coverage.opencover.xml" `
            /d:sonar.coverage.exclusions="**Tests/**/*,**/Test/**/*" `
            /d:sonar.verbose=true
          if ($LASTEXITCODE -ne 0) { throw "SonarCloud scan start failed" }
          dotnet build JobOnlineAPI.sln --configuration Release
          if ($LASTEXITCODE -ne 0) { throw "Build failed" }
          $testProjects = Get-ChildItem -Path . -Recurse -Include *.Tests.csproj
          if ($testProjects) {
            foreach ($proj in $testProjects) {
              dotnet test $proj.FullName --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage.opencover.xml
              if ($LASTEXITCODE -ne 0) { Write-Warning "Test project $proj failed, continuing" }
            }
          } else {
            echo "No test projects found, skipping tests"
          }
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="$env:SONAR_TOKEN"
          if ($LASTEXITCODE -ne 0) { throw "SonarCloud scan completion failed" }
        continue-on-error: false
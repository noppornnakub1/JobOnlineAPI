name: CI/CD Pipeline for JobOnlineAPI

on:
  push:
    branches:
      - master    # Production
      - release   # Test Site

jobs:
  build-and-analyze:
    name: Build and Analyze with SonarCloud
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarScanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarScanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
          if ($LASTEXITCODE -ne 0) { throw "SonarScanner installation failed" }

      - name: Install Coverlet
        shell: powershell
        run: |
          dotnet tool install --global coverlet.console
          if ($LASTEXITCODE -ne 0) { throw "Coverlet installation failed" }

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          echo "Project Key: noppornnakub1_JobOnlineAPI"
          echo "Organization: noppornnakub1"
          echo "SONAR_TOKEN: $env:SONAR_TOKEN"
          ./.sonar/scanner/dotnet-sonarscanner begin `
            /k:"noppornnakub1_JobOnlineAPI" `
            /o:"noppornnakub1" `
            /d:sonar.token="$env:SONAR_TOKEN" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="coverage.opencover.xml" `
            /d:sonar.coverage.exclusions="**Tests/**/*,**/Test/**/*" `
            /d:sonar.verbose=true
          if ($LASTEXITCODE -ne 0) { throw "SonarCloud scan start failed" }
          dotnet build JobOnlineAPI.sln --configuration Release
          if ($LASTEXITCODE -ne 0) { throw "Build failed" }
          $testProjects = Get-ChildItem -Path . -Recurse -Include *.Tests.csproj
          if ($testProjects) {
            foreach ($proj in $testProjects) {
              dotnet test $proj.FullName --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage.opencover.xml
              if ($LASTEXITCODE -ne 0) { Write-Warning "Test project $proj failed, continuing" }
            }
          } else {
            echo "No test projects found, skipping tests"
          }
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="$env:SONAR_TOKEN"
          if ($LASTEXITCODE -ne 0) { throw "SonarCloud scan completion failed" }
        continue-on-error: false

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/master'
    runs-on: self-hosted
    needs: build-and-analyze
    steps:
      - name: Debug Environment Variables
        shell: powershell
        run: |
          Write-Output "Listing all environment variables:"
          Get-ChildItem Env: | ForEach-Object {
            $name = $_.Name
            $value = $_.Value
            if ($value -eq $null -or $value -eq "") {
              Write-Output "WARNING: $name is null or empty"
            } else {
              Write-Output "$name has value (length: $($value.Length))"
            }
          }
          Write-Output "Checking secrets..."
          if ($env:SONAR_TOKEN) {
            Write-Output "SONAR_TOKEN is defined (length: $($env:SONAR_TOKEN.Length))"
          } else {
            Write-Output "SONAR_TOKEN is not defined"
          }
        continue-on-error: true

      - name: Checkout code
        uses: actions/checkout@v4

  deploy-test:
    name: Deploy to Test Site
    if: github.ref == 'refs/heads/release'
    runs-on: self-hosted
    needs: build-and-analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Stop IIS (Test Site)
        run: |
          iisreset /stop
        shell: cmd

      - name: Restore dependencies
        run: dotnet restore JobOnlineAPI.sln

      - name: Build
        run: dotnet build JobOnlineAPI.sln --configuration Release --no-restore

      - name: Publish to Test Site
        run: dotnet publish JobOnlineAPI.csproj --configuration Release --output C:\ONEE-JOBS\OneeJob-Backend-Test --no-build

      - name: Restart IIS (Test Site)
        run: |
          iisreset /restart
        shell: cmd
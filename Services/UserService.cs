using JobOnlineAPI.Models;
using JobOnlineAPI.Repositories;
using BCrypt.Net;

namespace JobOnlineAPI.Services
{
    public class UserService(IAdminRepository adminRepository, ILdapService ldapService) : IUserService
    {
        private readonly IAdminRepository _adminRepository = adminRepository;
        private readonly ILdapService _ldapService = ldapService;

        public async Task<AdminUser?> AuthenticateAsync(string username, string password, int JobID)
        {
            var user = await _adminRepository.GetUserByEmailAsync(username, JobID);

            if (user != null)
            {
                password = password.Trim();
                Console.WriteLine($"BypassUsed: {user.BypassUsed}, BypassPassword: {user.BypassPassword}");

                if (!string.IsNullOrEmpty(user.BypassPassword) && user.BypassUsed)
                {
                    string bypassHash = BCrypt.Net.BCrypt.HashPassword(user.BypassPassword);
                    Console.WriteLine($"Generated Bypass Hash: {bypassHash}");

                    bool isBypassPasswordMatched = BCrypt.Net.BCrypt.Verify(password, bypassHash);
                    Console.WriteLine($"Bypass Password Match: {isBypassPasswordMatched}, Input Password: '{password}'");
                    if (isBypassPasswordMatched)
                    {
                        Console.WriteLine("Bypass authentication successful!");
                        return new AdminUser
                        {
                            Username = user.Email,
                            Password = user.PasswordHash,
                            Role = "User",
                            UserId = user.UserId,
                            ConfirmConsent = user.ConfirmConsent,
                            ApplicantID = user.ApplicantID,
                            JobID = user.JobID,
                            Status = user.Status
                        };
                    }
                    else
                    {
                        Console.WriteLine("Bypass authentication failed!");
                    }
                }

                bool isPasswordMatched;
                if (user.PasswordHash.StartsWith("$2"))
                {
                    isPasswordMatched = BCrypt.Net.BCrypt.Verify(password, user.PasswordHash);
                }
                else
                {
                    isPasswordMatched = _adminRepository.VerifySHA256Hash(password, user.PasswordHash);
                }

                if (isPasswordMatched)
                {
                    Console.WriteLine("Normal authentication successful!");
                    return new AdminUser
                    {
                        Username = user.Email,
                        Password = user.PasswordHash,
                        Role = "User",
                        UserId = user.UserId,
                        ConfirmConsent = user.ConfirmConsent,
                        ApplicantID = user.ApplicantID,
                        JobID = user.JobID,
                        Status = user.Status
                    };
                }
            }

            var isLdapAuthenticated = await _ldapService.Authenticate(username, password);
            if (isLdapAuthenticated)
            {
                Console.WriteLine("LDAP authentication successful!");
                return new AdminUser
                {
                    AdminID = 0,
                    Username = username,
                    Password = "LDAPAuthenticated",
                    Role = "LDAP User"
                };
            }

            Console.WriteLine("All authentication attempts failed!");
            return null;
        }

        public async Task<string?> GetConfigValueAsync(string key)
        {
            return await _adminRepository.GetConfigValueAsync(key);
        }

        public async Task<string?> GetStyleValueAsync(string key)
        {
            return await _adminRepository.GetStyleValueAsync(key);
        }
    }
}
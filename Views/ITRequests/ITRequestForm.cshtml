<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>IT Request Form</title>
    <link href="/css/ITRequestForm.css" rel="stylesheet" />
</head>
<body>
    @{
        var model = Model as Dictionary<string, object> ?? new Dictionary<string, object>();
        var itRequests = model.TryGetValue("ITRequests", out var itRequestsObj) && itRequestsObj is IEnumerable<object> itReqs
        ? itReqs.Cast<dynamic>().ToList()
        : new List<dynamic>();

        // Helper function to truncate long text, accepting nullable string
        string Truncate(string? input, int maxLength)
        {
            if (string.IsNullOrEmpty(input) || input.Length <= maxLength)
                return input ?? "N/A";
            return input.Substring(0, maxLength) + "...";
        }

        // Initialize variables for Coordinator fields
        object? coordinatorName = null;
        object? coordinatorPhone = null;
        model.TryGetValue("CoordinatorName", out coordinatorName);
        model.TryGetValue("CoordinatorPhone", out coordinatorPhone);
    }
    <div class="page">
        <table style="width: 100%;">
            <tr>
                <td style="width: 33.33%; vertical-align: middle; border-style: none;">
                    <img src="/images/logo.png" alt="Company Logo" style="height: 30px; display: inline-block; vertical-align: middle; margin-right: 4px;" />
                </td>
                <td style="width: 33.33%; vertical-align: middle; text-align: center; border-style: none;">
                    <h1 style="margin: 0; vertical-align: middle;">IT Request Form</h1>
                </td>
                <td style="width: 33.33%; vertical-align: middle; border-style: none; padding: 2px; padding-left: 10mm;">
                    <p style="margin: 0; font-size: 3mm; line-height: 7.5mm; vertical-align: middle;">Form No.: @(model.TryGetValue("FormNumber", out var formNumber) ? Truncate(formNumber?.ToString(), 50) : "N/A")</p>
                    <p style="margin: 0; font-size: 3mm; line-height: 7.5mm; vertical-align: middle; min-width: 80mm; white-space: nowrap;">Date: @(model.TryGetValue("RequestDate", out var requestDate) && requestDate is DateTime requestDateValue ? requestDateValue.ToString("dd-MM-yyyy") : "N/A")</p>
                </td>
            </tr>
        </table>
        <div class="container container-requester">
            <h2>Section 1: Requester</h2>
            <table>
                <tr>
                    <th style="width: 30%;">Company</th>
                    <td>@(model.TryGetValue("Company", out var company) ? Truncate(company?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>Cost Center</th>
                    <td>@(model.TryGetValue("CostCenter", out var costCenter) ? Truncate(costCenter?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>Requester Full Name</th>
                    <td>@(model.TryGetValue("RequesterName", out var requesterName) ? Truncate(requesterName?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>Nickname</th>
                    <td>@(model.TryGetValue("Nickname", out var nickname) ? Truncate(nickname?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>Employee No.</th>
                    <td>@(model.TryGetValue("EmployeeId", out var employeeId) ? Truncate(employeeId?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>Job Title</th>
                    <td>@(model.TryGetValue("JobTitle", out var jobTitle) ? Truncate(jobTitle?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>Start Date</th>
                    <td>@(model.TryGetValue("StartDate", out var startDate) && startDate is DateTime startDateValue ? startDateValue.ToString("dd-MM-yyyy") : "N/A")</td>
                </tr>
                <tr>
                    <th>Mobile Phone</th>
                    <td>@(model.TryGetValue("MobilePhone", out var mobilePhone) ? Truncate(mobilePhone?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>Name - Surname (Eng)</th>
                    <td>@(model.TryGetValue("NameSurname", out var nameSurname) ? Truncate(nameSurname?.ToString(), 50) : "N/A")</td>
                </tr>
                @if ((coordinatorName != null && !string.IsNullOrEmpty(coordinatorName.ToString())) ||
                (coordinatorPhone != null && !string.IsNullOrEmpty(coordinatorPhone.ToString())))
                {
                    <tr>
                        <th>Coordinator Name</th>
                        <td>@Truncate(coordinatorName?.ToString(), 50)</td>
                    </tr>
                    <tr>
                        <th>Coordinator Phone</th>
                        <td>@Truncate(coordinatorPhone?.ToString(), 50)</td>
                    </tr>
                }
                <tr>
                    <th>Applicant ID</th>
                    <td>@(model.TryGetValue("ApplicantID", out var applicantId) ? Truncate(applicantId?.ToString(), 50) : "N/A")</td>
                </tr>
            </table>
            <h6><strong>Service Types</strong></h6>
            @{
                var serviceList = model.TryGetValue("ServicesList", out var servicesObj) && servicesObj is IEnumerable<object> services
                ? services.Cast<Dictionary<string, object>>().ToList()
                : new List<Dictionary<string, object>>();
                var serviceTypes = serviceList.GroupBy(s => new
                {
                    TypeId = s.TryGetValue("SERVICE_TYPE", out var st) && st != null ? Convert.ToInt32(st) : 0,
                    TypeDescription = s.TryGetValue("TYPE_DESCRIPTION", out var td) ? td?.ToString() : "Unknown"
                }).OrderBy(g => g.Key.TypeId).ToList();
            }
            @if (serviceTypes.Any())
            {
                <table class="service-table">
                    <tr>
                        @{
                            int columnCount = 3;
                            var groupsPerColumn = (int)Math.Ceiling((double)serviceTypes.Count / columnCount);
                            for (int col = 0; col < columnCount; col++)
                            {
                                <td style="width: 33.33%;">
                                    @for (int i = col * groupsPerColumn; i < Math.Min((col + 1) * groupsPerColumn, serviceTypes.Count); i++)
                                    {
                                        var serviceTypeGroup = serviceTypes[i];
                                        <div class="service-section">
                                            <h6>@(serviceTypeGroup.Key.TypeDescription) (Type @(serviceTypeGroup.Key.TypeId))</h6>
                                            @foreach (var service in serviceTypeGroup.OrderBy(s => s.TryGetValue("ID", out var id) && id != null ? Convert.ToInt32(id) : 0))
                                            {
                                                var serviceId = service.TryGetValue("ID", out var id) && id != null ? Convert.ToInt32(id) : 0;
                                                var serviceDesc = service.TryGetValue("SERVICE_DESCRIPTION", out var desc) ? desc?.ToString() : "N/A";
                                                var requiresDetail = service.TryGetValue("REQUIRES_DETAIL", out var rd) && rd is bool requiresDetailFlag && requiresDetailFlag;
                                                var isSelected = service.TryGetValue("IsSelected", out var selected) && selected is bool sel && sel;
                                                var reqDetail = isSelected && requiresDetail
                                                ? Truncate(itRequests.FirstOrDefault(r => r.SERVICE_ID == serviceId)?.REQ_DETAIL?.ToString(), 50)
                                                : null;
                                                <div class="service-item">
                                                    <div class="custom-checkbox">
                                                        <input type="checkbox" class="custom-checkbox-input" @(isSelected ? "checked" : "") disabled />
                                                        <label class="custom-checkbox-label @(isSelected ? "selected" : "")">@Truncate(serviceDesc, 50)</label>
                                                    </div>
                                                    @if (reqDetail != null)
                                                    {
                                                        <div class="service-details">
                                                            <label class="detail-label">Details:</label>
                                                            <div class="detail-content">@reqDetail</div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </td>
                            }
                        }
                    </tr>
                </table>
            }
            else
            {
                <p>No service types available</p>
            }
            <div style="page-break-inside: avoid;">
                <label class="form-label fw-semibold">Request Details</label>
                <textarea class="form-control" rows="2" readonly>@(model.TryGetValue("ServiceDetails", out var serviceDetails) ? Truncate(serviceDetails?.ToString(), 100) : "N/A")</textarea>
            </div>
        </div>
        <div class="container container-it">
            <h2>Section 2: IT</h2>
            <table>
                <tr>
                    <th style="width: 30%;">Received Date</th>
                    <td>@(model.TryGetValue("ReceivedDate", out var receivedDate) && receivedDate is DateTime receivedDateValue ? receivedDateValue.ToString("dd-MM-yyyy") : "N/A")</td>
                </tr>
                <tr>
                    <th>Assigned To</th>
                    <td>@(model.TryGetValue("AssignedTo", out var assignedTo) ? Truncate(assignedTo?.ToString(), 50) : "N/A")</td>
                </tr>
                <tr>
                    <th>IT Details</th>
                    <td>@(model.TryGetValue("ITDetails", out var itDetails) ? Truncate(itDetails?.ToString(), 50) : "N/A")</td>
                </tr>
            </table>
            <div class="priority-section">
                <label class="form-label fw-semibold">Priority</label>
                @{
                    string priorityValue = model.TryGetValue("Priority", out var priority) ? priority?.ToString() ?? "" : "";
                }
                <div class="custom-checkbox custom-checkbox-inline">
                    <input type="checkbox" class="custom-checkbox-input" @(priorityValue == "High" ? "checked" : "") disabled />
                    <label class="custom-checkbox-label @(priorityValue == "High" ? "selected" : "")">High</label>
                </div>
                <div class="custom-checkbox custom-checkbox-inline">
                    <input type="checkbox" class="custom-checkbox-input" @(priorityValue == "Medium" ? "checked" : "") disabled />
                    <label class="custom-checkbox-label @(priorityValue == "Medium" ? "selected" : "")">Medium</label>
                </div>
                <div class="custom-checkbox custom-checkbox-inline">
                    <input type="checkbox" class="custom-checkbox-input" @(priorityValue == "Low" ? "checked" : "") disabled />
                    <label class="custom-checkbox-label @(priorityValue == "Low" ? "selected" : "")">Low</label>
                </div>
            </div>
            <h6><strong>Approval and Acceptance</strong></h6>
            <table>
                <tr>
                    <th style="width: 20%;">Role</th>
                    <th style="width: 40%;">Name</th>
                    <th style="width: 40%;">Date</th>
                </tr>
                <tr>
                    <td>Requester</td>
                    <td>@(model.TryGetValue("RequesterName", out var reqName) ? Truncate(reqName?.ToString(), 50) : "N/A")</td>
                    <td>@(model.TryGetValue("RequesterDate", out var reqDate) && reqDate is DateTime requesterDateValue ? requesterDateValue.ToString("dd-MM-yyyy") : "N/A")</td>
                </tr>
                <tr>
                    <td>Approver</td>
                    <td>@(model.TryGetValue("ApproverText", out var approverText) ? Truncate(approverText?.ToString(), 50) : "N/A")</td>
                    <td>@(model.TryGetValue("ApproverDate", out var appDate) && appDate is DateTime approverDateValue ? approverDateValue.ToString("dd-MM-yyyy") : "N/A")</td>
                </tr>
                <tr>
                    <td>User (UAT)</td>
                    <td>@(model.TryGetValue("UatUser", out var uatUser) ? Truncate(uatUser?.ToString(), 50) : "N/A")</td>
                    <td>@(model.TryGetValue("UatDate", out var uatDate) && uatDate is DateTime uatDateValue ? uatDateValue.ToString("dd-MM-yyyy") : "N/A")</td>
                </tr>
                <tr>
                    <td>IT Officer</td>
                    <td>@(model.TryGetValue("ITOfficer", out var itOfficer) ? Truncate(itOfficer?.ToString(), 50) : "N/A")</td>
                    <td>@(model.TryGetValue("ITDate", out var itDate) && itDate is DateTime itOfficerDate ? itOfficerDate.ToString("dd-MM-yyyy") : "N/A")</td>
                </tr>
                <tr>
                    <td>Other Approver</td>
                    <td>@(model.TryGetValue("OtherApproverText", out var otherApprover) ? Truncate(otherApprover?.ToString(), 50) : "N/A")</td>
                    <td>@(model.TryGetValue("OtherApproverDate", out var otherAppDate) && otherAppDate is DateTime otherApproverDate ? otherApproverDate.ToString("dd-MM-yyyy") : "N/A")</td>
                </tr>
            </table>
        </div>
    </div>
</body>
</html>